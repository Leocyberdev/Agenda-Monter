
import threading
import time
from datetime import datetime
from src.utils.meeting_utils import check_and_move_finished_meetings
from src.utils.timezone_utils import get_brazil_now

class MeetingScheduler:
    def __init__(self):
        self.running = False
        self.thread = None
    
    def start(self):
        """Inicia o scheduler em uma thread separada"""
        if not self.running:
            self.running = True
            self.thread = threading.Thread(target=self._run_scheduler, daemon=True)
            self.thread.start()
            print("üìÖ Scheduler de reuni√µes iniciado!")
    
    def stop(self):
        """Para o scheduler"""
        self.running = False
        if self.thread:
            self.thread.join()
        print("üìÖ Scheduler de reuni√µes parado!")
    
    def _run_scheduler(self):
        """Executa o loop principal do scheduler"""
        while self.running:
            try:
                # Verificar reuni√µes finalizadas a cada 5 minutos (300 segundos)
                moved_count = check_and_move_finished_meetings()
                if moved_count > 0:
                    now = get_brazil_now()
                    print(f"üîÑ [{now.strftime('%d/%m/%Y %H:%M:%S')}] {moved_count} reuni√µes movidas para finalizadas.")
                
                # Aguardar 5 minutos antes da pr√≥xima verifica√ß√£o
                time.sleep(300)
                
            except Exception as e:
                print(f"‚ùå Erro no scheduler de reuni√µes: {e}")
                # Aguardar 1 minuto em caso de erro antes de tentar novamente
                time.sleep(60)

# Inst√¢ncia global do scheduler
meeting_scheduler = MeetingScheduler()

def start_meeting_scheduler():
    """Fun√ß√£o para iniciar o scheduler"""
    meeting_scheduler.start()

def stop_meeting_scheduler():
    """Fun√ß√£o para parar o scheduler"""
    meeting_scheduler.stop()
